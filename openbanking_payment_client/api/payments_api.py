# coding: utf-8

"""
    Python client for Payment Initiation API

    Based on https://github.com/OpenBankingUK/payment-initiation-api-spec

    OpenAPI spec version: v1.1.1
    Spec: https://www.openbanking.org.uk/read-write-apis/
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from openbanking_payment_client.api_client import ApiClient


class PaymentsApi(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def create_payment_submission(self, x_idempotency_key, x_fapi_financial_id, authorization, body, **kwargs):  # noqa: E501
        """Create a payment submission  # noqa: E501

        Submit a previously setup payment  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.create_payment_submission(x_idempotency_key, x_fapi_financial_id, authorization, body, async=True)
        >>> result = thread.get()

        :param async bool
        :param str x_idempotency_key: Every request will be processed only once per x-idempotency-key.  The Idempotency Key will be valid for 24 hours. (required)
        :param str x_fapi_financial_id: The unique id of the ASPSP to which the request is issued. The unique id will be issued by OB. (required)
        :param str authorization: An Authorisation Token as per https://tools.ietf.org/html/rfc6750 (required)
        :param PaymentSubmissionPOSTRequest body: Setup a single immediate payment (required)
        :param str x_fapi_customer_last_logged_time: The time when the PSU last logged in with the TPP.  All dates in the HTTP headers are represented as RFC 7231 Full Dates. An example is below:  Sun, 10 Sep 2017 19:43:31 UTC
        :param str x_fapi_customer_ip_address: The PSU's IP address if the PSU is currently logged in with the TPP.
        :param str x_fapi_interaction_id: An RFC4122 UID used as a correlation id.
        :param str x_jws_signature: DO NOT USE. Header containing a detached JWS signature of the body of the payload.
        :return: PaymentSubmitPOST201Response
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.create_payment_submission_with_http_info(x_idempotency_key, x_fapi_financial_id, authorization, body, **kwargs)  # noqa: E501
        else:
            (data) = self.create_payment_submission_with_http_info(x_idempotency_key, x_fapi_financial_id, authorization, body, **kwargs)  # noqa: E501
            return data

    def create_payment_submission_with_http_info(self, x_idempotency_key, x_fapi_financial_id, authorization, body, **kwargs):  # noqa: E501
        """Create a payment submission  # noqa: E501

        Submit a previously setup payment  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.create_payment_submission_with_http_info(x_idempotency_key, x_fapi_financial_id, authorization, body, async=True)
        >>> result = thread.get()

        :param async bool
        :param str x_idempotency_key: Every request will be processed only once per x-idempotency-key.  The Idempotency Key will be valid for 24 hours. (required)
        :param str x_fapi_financial_id: The unique id of the ASPSP to which the request is issued. The unique id will be issued by OB. (required)
        :param str authorization: An Authorisation Token as per https://tools.ietf.org/html/rfc6750 (required)
        :param PaymentSubmissionPOSTRequest body: Setup a single immediate payment (required)
        :param str x_fapi_customer_last_logged_time: The time when the PSU last logged in with the TPP.  All dates in the HTTP headers are represented as RFC 7231 Full Dates. An example is below:  Sun, 10 Sep 2017 19:43:31 UTC
        :param str x_fapi_customer_ip_address: The PSU's IP address if the PSU is currently logged in with the TPP.
        :param str x_fapi_interaction_id: An RFC4122 UID used as a correlation id.
        :param str x_jws_signature: DO NOT USE. Header containing a detached JWS signature of the body of the payload.
        :return: PaymentSubmitPOST201Response
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['x_idempotency_key', 'x_fapi_financial_id', 'authorization', 'body', 'x_fapi_customer_last_logged_time', 'x_fapi_customer_ip_address', 'x_fapi_interaction_id', 'x_jws_signature']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method create_payment_submission" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'x_idempotency_key' is set
        if ('x_idempotency_key' not in params or
                params['x_idempotency_key'] is None):
            raise ValueError("Missing the required parameter `x_idempotency_key` when calling `create_payment_submission`")  # noqa: E501
        # verify the required parameter 'x_fapi_financial_id' is set
        if ('x_fapi_financial_id' not in params or
                params['x_fapi_financial_id'] is None):
            raise ValueError("Missing the required parameter `x_fapi_financial_id` when calling `create_payment_submission`")  # noqa: E501
        # verify the required parameter 'authorization' is set
        if ('authorization' not in params or
                params['authorization'] is None):
            raise ValueError("Missing the required parameter `authorization` when calling `create_payment_submission`")  # noqa: E501
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `create_payment_submission`")  # noqa: E501

        if ('x_idempotency_key' in params and
                len(params['x_idempotency_key']) > 40):
            raise ValueError("Invalid value for parameter `x_idempotency_key` when calling `create_payment_submission`, length must be less than or equal to `40`")  # noqa: E501
        if 'x_idempotency_key' in params and not re.search('^(?!\\s)(.*)(\\S)$', params['x_idempotency_key']):  # noqa: E501
            raise ValueError("Invalid value for parameter `x_idempotency_key` when calling `create_payment_submission`, must conform to the pattern `/^(?!\\s)(.*)(\\S)$/`")  # noqa: E501
        if 'x_fapi_customer_last_logged_time' in params and not re.search('^(Mon|Tue|Wed|Thu|Fri|Sat|Sun), \\d{2} (Jan|Feb|Mar|Apr|May|Jun|Jul|Aug|Sep|Oct|Nov|Dec) \\d{4} \\d{2}:\\d{2}:\\d{2} (GMT|UTC)$', params['x_fapi_customer_last_logged_time']):  # noqa: E501
            raise ValueError("Invalid value for parameter `x_fapi_customer_last_logged_time` when calling `create_payment_submission`, must conform to the pattern `/^(Mon|Tue|Wed|Thu|Fri|Sat|Sun), \\d{2} (Jan|Feb|Mar|Apr|May|Jun|Jul|Aug|Sep|Oct|Nov|Dec) \\d{4} \\d{2}:\\d{2}:\\d{2} (GMT|UTC)$/`")  # noqa: E501
        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}
        if 'x_idempotency_key' in params:
            header_params['x-idempotency-key'] = params['x_idempotency_key']  # noqa: E501
        if 'x_fapi_financial_id' in params:
            header_params['x-fapi-financial-id'] = params['x_fapi_financial_id']  # noqa: E501
        if 'x_fapi_customer_last_logged_time' in params:
            header_params['x-fapi-customer-last-logged-time'] = params['x_fapi_customer_last_logged_time']  # noqa: E501
        if 'x_fapi_customer_ip_address' in params:
            header_params['x-fapi-customer-ip-address'] = params['x_fapi_customer_ip_address']  # noqa: E501
        if 'x_fapi_interaction_id' in params:
            header_params['x-fapi-interaction-id'] = params['x_fapi_interaction_id']  # noqa: E501
        if 'authorization' in params:
            header_params['Authorization'] = params['authorization']  # noqa: E501
        if 'x_jws_signature' in params:
            header_params['x-jws-signature'] = params['x_jws_signature']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json; charset=utf-8'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json; charset=utf-8'])  # noqa: E501

        # Authentication setting
        auth_settings = ['PSUOAuth2Security']  # noqa: E501

        return self.api_client.call_api(
            '/payment-submissions', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='PaymentSubmitPOST201Response',  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def create_single_immediate_payment(self, x_idempotency_key, x_fapi_financial_id, authorization, body, **kwargs):  # noqa: E501
        """Create a single immediate payment  # noqa: E501

        Create a single immediate payment  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.create_single_immediate_payment(x_idempotency_key, x_fapi_financial_id, authorization, body, async=True)
        >>> result = thread.get()

        :param async bool
        :param str x_idempotency_key: Every request will be processed only once per x-idempotency-key.  The Idempotency Key will be valid for 24 hours. (required)
        :param str x_fapi_financial_id: The unique id of the ASPSP to which the request is issued. The unique id will be issued by OB. (required)
        :param str authorization: An Authorisation Token as per https://tools.ietf.org/html/rfc6750 (required)
        :param PaymentSetupPOSTRequest body: Setup a single immediate payment (required)
        :param str x_fapi_customer_last_logged_time: The time when the PSU last logged in with the TPP.  All dates in the HTTP headers are represented as RFC 7231 Full Dates. An example is below:  Sun, 10 Sep 2017 19:43:31 UTC
        :param str x_fapi_customer_ip_address: The PSU's IP address if the PSU is currently logged in with the TPP.
        :param str x_fapi_interaction_id: An RFC4122 UID used as a correlation id.
        :param str x_jws_signature: DO NOT USE. Header containing a detached JWS signature of the body of the payload.
        :return: PaymentSetupPOSTResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.create_single_immediate_payment_with_http_info(x_idempotency_key, x_fapi_financial_id, authorization, body, **kwargs)  # noqa: E501
        else:
            (data) = self.create_single_immediate_payment_with_http_info(x_idempotency_key, x_fapi_financial_id, authorization, body, **kwargs)  # noqa: E501
            return data

    def create_single_immediate_payment_with_http_info(self, x_idempotency_key, x_fapi_financial_id, authorization, body, **kwargs):  # noqa: E501
        """Create a single immediate payment  # noqa: E501

        Create a single immediate payment  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.create_single_immediate_payment_with_http_info(x_idempotency_key, x_fapi_financial_id, authorization, body, async=True)
        >>> result = thread.get()

        :param async bool
        :param str x_idempotency_key: Every request will be processed only once per x-idempotency-key.  The Idempotency Key will be valid for 24 hours. (required)
        :param str x_fapi_financial_id: The unique id of the ASPSP to which the request is issued. The unique id will be issued by OB. (required)
        :param str authorization: An Authorisation Token as per https://tools.ietf.org/html/rfc6750 (required)
        :param PaymentSetupPOSTRequest body: Setup a single immediate payment (required)
        :param str x_fapi_customer_last_logged_time: The time when the PSU last logged in with the TPP.  All dates in the HTTP headers are represented as RFC 7231 Full Dates. An example is below:  Sun, 10 Sep 2017 19:43:31 UTC
        :param str x_fapi_customer_ip_address: The PSU's IP address if the PSU is currently logged in with the TPP.
        :param str x_fapi_interaction_id: An RFC4122 UID used as a correlation id.
        :param str x_jws_signature: DO NOT USE. Header containing a detached JWS signature of the body of the payload.
        :return: PaymentSetupPOSTResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['x_idempotency_key', 'x_fapi_financial_id', 'authorization', 'body', 'x_fapi_customer_last_logged_time', 'x_fapi_customer_ip_address', 'x_fapi_interaction_id', 'x_jws_signature']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method create_single_immediate_payment" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'x_idempotency_key' is set
        if ('x_idempotency_key' not in params or
                params['x_idempotency_key'] is None):
            raise ValueError("Missing the required parameter `x_idempotency_key` when calling `create_single_immediate_payment`")  # noqa: E501
        # verify the required parameter 'x_fapi_financial_id' is set
        if ('x_fapi_financial_id' not in params or
                params['x_fapi_financial_id'] is None):
            raise ValueError("Missing the required parameter `x_fapi_financial_id` when calling `create_single_immediate_payment`")  # noqa: E501
        # verify the required parameter 'authorization' is set
        if ('authorization' not in params or
                params['authorization'] is None):
            raise ValueError("Missing the required parameter `authorization` when calling `create_single_immediate_payment`")  # noqa: E501
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `create_single_immediate_payment`")  # noqa: E501

        if ('x_idempotency_key' in params and
                len(params['x_idempotency_key']) > 40):
            raise ValueError("Invalid value for parameter `x_idempotency_key` when calling `create_single_immediate_payment`, length must be less than or equal to `40`")  # noqa: E501
        if 'x_idempotency_key' in params and not re.search('^(?!\\s)(.*)(\\S)$', params['x_idempotency_key']):  # noqa: E501
            raise ValueError("Invalid value for parameter `x_idempotency_key` when calling `create_single_immediate_payment`, must conform to the pattern `/^(?!\\s)(.*)(\\S)$/`")  # noqa: E501
        if 'x_fapi_customer_last_logged_time' in params and not re.search('^(Mon|Tue|Wed|Thu|Fri|Sat|Sun), \\d{2} (Jan|Feb|Mar|Apr|May|Jun|Jul|Aug|Sep|Oct|Nov|Dec) \\d{4} \\d{2}:\\d{2}:\\d{2} (GMT|UTC)$', params['x_fapi_customer_last_logged_time']):  # noqa: E501
            raise ValueError("Invalid value for parameter `x_fapi_customer_last_logged_time` when calling `create_single_immediate_payment`, must conform to the pattern `/^(Mon|Tue|Wed|Thu|Fri|Sat|Sun), \\d{2} (Jan|Feb|Mar|Apr|May|Jun|Jul|Aug|Sep|Oct|Nov|Dec) \\d{4} \\d{2}:\\d{2}:\\d{2} (GMT|UTC)$/`")  # noqa: E501
        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}
        if 'x_idempotency_key' in params:
            header_params['x-idempotency-key'] = params['x_idempotency_key']  # noqa: E501
        if 'x_fapi_financial_id' in params:
            header_params['x-fapi-financial-id'] = params['x_fapi_financial_id']  # noqa: E501
        if 'x_fapi_customer_last_logged_time' in params:
            header_params['x-fapi-customer-last-logged-time'] = params['x_fapi_customer_last_logged_time']  # noqa: E501
        if 'x_fapi_customer_ip_address' in params:
            header_params['x-fapi-customer-ip-address'] = params['x_fapi_customer_ip_address']  # noqa: E501
        if 'x_fapi_interaction_id' in params:
            header_params['x-fapi-interaction-id'] = params['x_fapi_interaction_id']  # noqa: E501
        if 'authorization' in params:
            header_params['Authorization'] = params['authorization']  # noqa: E501
        if 'x_jws_signature' in params:
            header_params['x-jws-signature'] = params['x_jws_signature']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json; charset=utf-8'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json; charset=utf-8'])  # noqa: E501

        # Authentication setting
        auth_settings = ['TPPOAuth2Security']  # noqa: E501

        return self.api_client.call_api(
            '/payments', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='PaymentSetupPOSTResponse',  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_payment_submission(self, payment_submission_id, x_fapi_financial_id, authorization, **kwargs):  # noqa: E501
        """Get a payment submission  # noqa: E501

        Get payment submission  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.get_payment_submission(payment_submission_id, x_fapi_financial_id, authorization, async=True)
        >>> result = thread.get()

        :param async bool
        :param str payment_submission_id: Unique identification as assigned by the ASPSP to uniquely identify the payment submission resource. (required)
        :param str x_fapi_financial_id: The unique id of the ASPSP to which the request is issued. The unique id will be issued by OB. (required)
        :param str authorization: An Authorisation Token as per https://tools.ietf.org/html/rfc6750 (required)
        :param str x_fapi_customer_last_logged_time: The time when the PSU last logged in with the TPP.  All dates in the HTTP headers are represented as RFC 7231 Full Dates. An example is below:  Sun, 10 Sep 2017 19:43:31 UTC
        :param str x_fapi_customer_ip_address: The PSU's IP address if the PSU is currently logged in with the TPP.
        :param str x_fapi_interaction_id: An RFC4122 UID used as a correlation id.
        :return: PaymentSubmitPOST201Response
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.get_payment_submission_with_http_info(payment_submission_id, x_fapi_financial_id, authorization, **kwargs)  # noqa: E501
        else:
            (data) = self.get_payment_submission_with_http_info(payment_submission_id, x_fapi_financial_id, authorization, **kwargs)  # noqa: E501
            return data

    def get_payment_submission_with_http_info(self, payment_submission_id, x_fapi_financial_id, authorization, **kwargs):  # noqa: E501
        """Get a payment submission  # noqa: E501

        Get payment submission  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.get_payment_submission_with_http_info(payment_submission_id, x_fapi_financial_id, authorization, async=True)
        >>> result = thread.get()

        :param async bool
        :param str payment_submission_id: Unique identification as assigned by the ASPSP to uniquely identify the payment submission resource. (required)
        :param str x_fapi_financial_id: The unique id of the ASPSP to which the request is issued. The unique id will be issued by OB. (required)
        :param str authorization: An Authorisation Token as per https://tools.ietf.org/html/rfc6750 (required)
        :param str x_fapi_customer_last_logged_time: The time when the PSU last logged in with the TPP.  All dates in the HTTP headers are represented as RFC 7231 Full Dates. An example is below:  Sun, 10 Sep 2017 19:43:31 UTC
        :param str x_fapi_customer_ip_address: The PSU's IP address if the PSU is currently logged in with the TPP.
        :param str x_fapi_interaction_id: An RFC4122 UID used as a correlation id.
        :return: PaymentSubmitPOST201Response
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['payment_submission_id', 'x_fapi_financial_id', 'authorization', 'x_fapi_customer_last_logged_time', 'x_fapi_customer_ip_address', 'x_fapi_interaction_id']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_payment_submission" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'payment_submission_id' is set
        if ('payment_submission_id' not in params or
                params['payment_submission_id'] is None):
            raise ValueError("Missing the required parameter `payment_submission_id` when calling `get_payment_submission`")  # noqa: E501
        # verify the required parameter 'x_fapi_financial_id' is set
        if ('x_fapi_financial_id' not in params or
                params['x_fapi_financial_id'] is None):
            raise ValueError("Missing the required parameter `x_fapi_financial_id` when calling `get_payment_submission`")  # noqa: E501
        # verify the required parameter 'authorization' is set
        if ('authorization' not in params or
                params['authorization'] is None):
            raise ValueError("Missing the required parameter `authorization` when calling `get_payment_submission`")  # noqa: E501

        if 'x_fapi_customer_last_logged_time' in params and not re.search('^(Mon|Tue|Wed|Thu|Fri|Sat|Sun), \\d{2} (Jan|Feb|Mar|Apr|May|Jun|Jul|Aug|Sep|Oct|Nov|Dec) \\d{4} \\d{2}:\\d{2}:\\d{2} (GMT|UTC)$', params['x_fapi_customer_last_logged_time']):  # noqa: E501
            raise ValueError("Invalid value for parameter `x_fapi_customer_last_logged_time` when calling `get_payment_submission`, must conform to the pattern `/^(Mon|Tue|Wed|Thu|Fri|Sat|Sun), \\d{2} (Jan|Feb|Mar|Apr|May|Jun|Jul|Aug|Sep|Oct|Nov|Dec) \\d{4} \\d{2}:\\d{2}:\\d{2} (GMT|UTC)$/`")  # noqa: E501
        collection_formats = {}

        path_params = {}
        if 'payment_submission_id' in params:
            path_params['PaymentSubmissionId'] = params['payment_submission_id']  # noqa: E501

        query_params = []

        header_params = {}
        if 'x_fapi_financial_id' in params:
            header_params['x-fapi-financial-id'] = params['x_fapi_financial_id']  # noqa: E501
        if 'x_fapi_customer_last_logged_time' in params:
            header_params['x-fapi-customer-last-logged-time'] = params['x_fapi_customer_last_logged_time']  # noqa: E501
        if 'x_fapi_customer_ip_address' in params:
            header_params['x-fapi-customer-ip-address'] = params['x_fapi_customer_ip_address']  # noqa: E501
        if 'x_fapi_interaction_id' in params:
            header_params['x-fapi-interaction-id'] = params['x_fapi_interaction_id']  # noqa: E501
        if 'authorization' in params:
            header_params['Authorization'] = params['authorization']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json; charset=utf-8'])  # noqa: E501

        # Authentication setting
        auth_settings = ['PSUOAuth2Security', 'TPPOAuth2Security']  # noqa: E501

        return self.api_client.call_api(
            '/payment-submissions/{PaymentSubmissionId}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='PaymentSubmitPOST201Response',  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_single_immediate_payment(self, payment_id, x_fapi_financial_id, authorization, **kwargs):  # noqa: E501
        """Get a single immediate payment  # noqa: E501

        Get a single immediate payment  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.get_single_immediate_payment(payment_id, x_fapi_financial_id, authorization, async=True)
        >>> result = thread.get()

        :param async bool
        :param str payment_id: Unique identification as assigned by the ASPSP to uniquely identify the payment setup resource. (required)
        :param str x_fapi_financial_id: The unique id of the ASPSP to which the request is issued. The unique id will be issued by OB. (required)
        :param str authorization: An Authorisation Token as per https://tools.ietf.org/html/rfc6750 (required)
        :param str x_fapi_customer_last_logged_time: The time when the PSU last logged in with the TPP.  All dates in the HTTP headers are represented as RFC 7231 Full Dates. An example is below:  Sun, 10 Sep 2017 19:43:31 UTC
        :param str x_fapi_customer_ip_address: The PSU's IP address if the PSU is currently logged in with the TPP.
        :param str x_fapi_interaction_id: An RFC4122 UID used as a correlation id.
        :return: PaymentSetupPOSTResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.get_single_immediate_payment_with_http_info(payment_id, x_fapi_financial_id, authorization, **kwargs)  # noqa: E501
        else:
            (data) = self.get_single_immediate_payment_with_http_info(payment_id, x_fapi_financial_id, authorization, **kwargs)  # noqa: E501
            return data

    def get_single_immediate_payment_with_http_info(self, payment_id, x_fapi_financial_id, authorization, **kwargs):  # noqa: E501
        """Get a single immediate payment  # noqa: E501

        Get a single immediate payment  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.get_single_immediate_payment_with_http_info(payment_id, x_fapi_financial_id, authorization, async=True)
        >>> result = thread.get()

        :param async bool
        :param str payment_id: Unique identification as assigned by the ASPSP to uniquely identify the payment setup resource. (required)
        :param str x_fapi_financial_id: The unique id of the ASPSP to which the request is issued. The unique id will be issued by OB. (required)
        :param str authorization: An Authorisation Token as per https://tools.ietf.org/html/rfc6750 (required)
        :param str x_fapi_customer_last_logged_time: The time when the PSU last logged in with the TPP.  All dates in the HTTP headers are represented as RFC 7231 Full Dates. An example is below:  Sun, 10 Sep 2017 19:43:31 UTC
        :param str x_fapi_customer_ip_address: The PSU's IP address if the PSU is currently logged in with the TPP.
        :param str x_fapi_interaction_id: An RFC4122 UID used as a correlation id.
        :return: PaymentSetupPOSTResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['payment_id', 'x_fapi_financial_id', 'authorization', 'x_fapi_customer_last_logged_time', 'x_fapi_customer_ip_address', 'x_fapi_interaction_id']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_single_immediate_payment" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'payment_id' is set
        if ('payment_id' not in params or
                params['payment_id'] is None):
            raise ValueError("Missing the required parameter `payment_id` when calling `get_single_immediate_payment`")  # noqa: E501
        # verify the required parameter 'x_fapi_financial_id' is set
        if ('x_fapi_financial_id' not in params or
                params['x_fapi_financial_id'] is None):
            raise ValueError("Missing the required parameter `x_fapi_financial_id` when calling `get_single_immediate_payment`")  # noqa: E501
        # verify the required parameter 'authorization' is set
        if ('authorization' not in params or
                params['authorization'] is None):
            raise ValueError("Missing the required parameter `authorization` when calling `get_single_immediate_payment`")  # noqa: E501

        if 'x_fapi_customer_last_logged_time' in params and not re.search('^(Mon|Tue|Wed|Thu|Fri|Sat|Sun), \\d{2} (Jan|Feb|Mar|Apr|May|Jun|Jul|Aug|Sep|Oct|Nov|Dec) \\d{4} \\d{2}:\\d{2}:\\d{2} (GMT|UTC)$', params['x_fapi_customer_last_logged_time']):  # noqa: E501
            raise ValueError("Invalid value for parameter `x_fapi_customer_last_logged_time` when calling `get_single_immediate_payment`, must conform to the pattern `/^(Mon|Tue|Wed|Thu|Fri|Sat|Sun), \\d{2} (Jan|Feb|Mar|Apr|May|Jun|Jul|Aug|Sep|Oct|Nov|Dec) \\d{4} \\d{2}:\\d{2}:\\d{2} (GMT|UTC)$/`")  # noqa: E501
        collection_formats = {}

        path_params = {}
        if 'payment_id' in params:
            path_params['PaymentId'] = params['payment_id']  # noqa: E501

        query_params = []

        header_params = {}
        if 'x_fapi_financial_id' in params:
            header_params['x-fapi-financial-id'] = params['x_fapi_financial_id']  # noqa: E501
        if 'x_fapi_customer_last_logged_time' in params:
            header_params['x-fapi-customer-last-logged-time'] = params['x_fapi_customer_last_logged_time']  # noqa: E501
        if 'x_fapi_customer_ip_address' in params:
            header_params['x-fapi-customer-ip-address'] = params['x_fapi_customer_ip_address']  # noqa: E501
        if 'x_fapi_interaction_id' in params:
            header_params['x-fapi-interaction-id'] = params['x_fapi_interaction_id']  # noqa: E501
        if 'authorization' in params:
            header_params['Authorization'] = params['authorization']  # noqa: E501

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json; charset=utf-8'])  # noqa: E501

        # Authentication setting
        auth_settings = ['PSUOAuth2Security', 'TPPOAuth2Security']  # noqa: E501

        return self.api_client.call_api(
            '/payments/{PaymentId}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='PaymentSetupPOSTResponse',  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)
