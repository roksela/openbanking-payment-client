# coding: utf-8

"""
    Python client for Payment Initiation API

    Based on https://github.com/OpenBankingUK/payment-initiation-api-spec

    OpenAPI spec version: v1.1.1
    Spec: https://www.openbanking.org.uk/read-write-apis/
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class PaymentSetupResponse1(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'payment_submission_id': 'str',
        'payment_id': 'str',
        'status': 'str',
        'creation_date_time': 'datetime'
    }

    attribute_map = {
        'payment_submission_id': 'PaymentSubmissionId',
        'payment_id': 'PaymentId',
        'status': 'Status',
        'creation_date_time': 'CreationDateTime'
    }

    def __init__(self, payment_submission_id=None, payment_id=None, status=None, creation_date_time=None):  # noqa: E501
        """PaymentSetupResponse1 - a model defined in Swagger"""  # noqa: E501

        self._payment_submission_id = None
        self._payment_id = None
        self._status = None
        self._creation_date_time = None
        self.discriminator = None

        self.payment_submission_id = payment_submission_id
        self.payment_id = payment_id
        if status is not None:
            self.status = status
        self.creation_date_time = creation_date_time

    @property
    def payment_submission_id(self):
        """Gets the payment_submission_id of this PaymentSetupResponse1.  # noqa: E501

        OB: Unique identification as assigned by the ASPSP to uniquely identify the payment submission resource.  # noqa: E501

        :return: The payment_submission_id of this PaymentSetupResponse1.  # noqa: E501
        :rtype: str
        """
        return self._payment_submission_id

    @payment_submission_id.setter
    def payment_submission_id(self, payment_submission_id):
        """Sets the payment_submission_id of this PaymentSetupResponse1.

        OB: Unique identification as assigned by the ASPSP to uniquely identify the payment submission resource.  # noqa: E501

        :param payment_submission_id: The payment_submission_id of this PaymentSetupResponse1.  # noqa: E501
        :type: str
        """
        if payment_submission_id is None:
            raise ValueError("Invalid value for `payment_submission_id`, must not be `None`")  # noqa: E501
        if payment_submission_id is not None and len(payment_submission_id) > 40:
            raise ValueError("Invalid value for `payment_submission_id`, length must be less than or equal to `40`")  # noqa: E501
        if payment_submission_id is not None and len(payment_submission_id) < 1:
            raise ValueError("Invalid value for `payment_submission_id`, length must be greater than or equal to `1`")  # noqa: E501

        self._payment_submission_id = payment_submission_id

    @property
    def payment_id(self):
        """Gets the payment_id of this PaymentSetupResponse1.  # noqa: E501

        OB: Unique identification as assigned by the ASPSP to uniquely identify the payment setup resource.  # noqa: E501

        :return: The payment_id of this PaymentSetupResponse1.  # noqa: E501
        :rtype: str
        """
        return self._payment_id

    @payment_id.setter
    def payment_id(self, payment_id):
        """Sets the payment_id of this PaymentSetupResponse1.

        OB: Unique identification as assigned by the ASPSP to uniquely identify the payment setup resource.  # noqa: E501

        :param payment_id: The payment_id of this PaymentSetupResponse1.  # noqa: E501
        :type: str
        """
        if payment_id is None:
            raise ValueError("Invalid value for `payment_id`, must not be `None`")  # noqa: E501
        if payment_id is not None and len(payment_id) > 128:
            raise ValueError("Invalid value for `payment_id`, length must be less than or equal to `128`")  # noqa: E501
        if payment_id is not None and len(payment_id) < 1:
            raise ValueError("Invalid value for `payment_id`, length must be greater than or equal to `1`")  # noqa: E501

        self._payment_id = payment_id

    @property
    def status(self):
        """Gets the status of this PaymentSetupResponse1.  # noqa: E501

        Specifies the status of the payment resource.  # noqa: E501

        :return: The status of this PaymentSetupResponse1.  # noqa: E501
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this PaymentSetupResponse1.

        Specifies the status of the payment resource.  # noqa: E501

        :param status: The status of this PaymentSetupResponse1.  # noqa: E501
        :type: str
        """
        allowed_values = ["AcceptedSettlementCompleted", "AcceptedSettlementInProcess", "Pending", "Rejected"]  # noqa: E501
        if status not in allowed_values:
            raise ValueError(
                "Invalid value for `status` ({0}), must be one of {1}"  # noqa: E501
                .format(status, allowed_values)
            )

        self._status = status

    @property
    def creation_date_time(self):
        """Gets the creation_date_time of this PaymentSetupResponse1.  # noqa: E501

        Date and time at which the resource was created.  All dates in the JSON payloads are represented in ISO 8601 date-time format.  All date-time fields in responses must include the timezone. An example is below: 2017-04-05T10:43:07+00:00  # noqa: E501

        :return: The creation_date_time of this PaymentSetupResponse1.  # noqa: E501
        :rtype: datetime
        """
        return self._creation_date_time

    @creation_date_time.setter
    def creation_date_time(self, creation_date_time):
        """Sets the creation_date_time of this PaymentSetupResponse1.

        Date and time at which the resource was created.  All dates in the JSON payloads are represented in ISO 8601 date-time format.  All date-time fields in responses must include the timezone. An example is below: 2017-04-05T10:43:07+00:00  # noqa: E501

        :param creation_date_time: The creation_date_time of this PaymentSetupResponse1.  # noqa: E501
        :type: datetime
        """
        if creation_date_time is None:
            raise ValueError("Invalid value for `creation_date_time`, must not be `None`")  # noqa: E501

        self._creation_date_time = creation_date_time

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, PaymentSetupResponse1):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
