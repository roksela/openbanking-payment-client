# coding: utf-8

"""
    Python client for Payment Initiation API

    Based on https://github.com/OpenBankingUK/payment-initiation-api-spec

    OpenAPI spec version: v1.1.1
    Spec: https://www.openbanking.org.uk/read-write-apis/
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from openbanking_payment_client.model.risk_delivery_address import RiskDeliveryAddress  # noqa: F401,E501


class Risk1(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'payment_context_code': 'str',
        'merchant_category_code': 'str',
        'merchant_customer_identification': 'str',
        'delivery_address': 'RiskDeliveryAddress'
    }

    attribute_map = {
        'payment_context_code': 'PaymentContextCode',
        'merchant_category_code': 'MerchantCategoryCode',
        'merchant_customer_identification': 'MerchantCustomerIdentification',
        'delivery_address': 'DeliveryAddress'
    }

    def __init__(self, payment_context_code=None, merchant_category_code=None, merchant_customer_identification=None, delivery_address=None):  # noqa: E501
        """Risk1 - a model defined in Swagger"""  # noqa: E501

        self._payment_context_code = None
        self._merchant_category_code = None
        self._merchant_customer_identification = None
        self._delivery_address = None
        self.discriminator = None

        if payment_context_code is not None:
            self.payment_context_code = payment_context_code
        if merchant_category_code is not None:
            self.merchant_category_code = merchant_category_code
        if merchant_customer_identification is not None:
            self.merchant_customer_identification = merchant_customer_identification
        if delivery_address is not None:
            self.delivery_address = delivery_address

    @property
    def payment_context_code(self):
        """Gets the payment_context_code of this Risk1.  # noqa: E501

        Specifies the payment context  # noqa: E501

        :return: The payment_context_code of this Risk1.  # noqa: E501
        :rtype: str
        """
        return self._payment_context_code

    @payment_context_code.setter
    def payment_context_code(self, payment_context_code):
        """Sets the payment_context_code of this Risk1.

        Specifies the payment context  # noqa: E501

        :param payment_context_code: The payment_context_code of this Risk1.  # noqa: E501
        :type: str
        """
        allowed_values = ["BillPayment", "EcommerceGoods", "EcommerceServices", "Other", "PersonToPerson"]  # noqa: E501
        if payment_context_code not in allowed_values:
            raise ValueError(
                "Invalid value for `payment_context_code` ({0}), must be one of {1}"  # noqa: E501
                .format(payment_context_code, allowed_values)
            )

        self._payment_context_code = payment_context_code

    @property
    def merchant_category_code(self):
        """Gets the merchant_category_code of this Risk1.  # noqa: E501

        Category code conforms to ISO 18245, related to the type of services or goods the merchant provides for the transaction  # noqa: E501

        :return: The merchant_category_code of this Risk1.  # noqa: E501
        :rtype: str
        """
        return self._merchant_category_code

    @merchant_category_code.setter
    def merchant_category_code(self, merchant_category_code):
        """Sets the merchant_category_code of this Risk1.

        Category code conforms to ISO 18245, related to the type of services or goods the merchant provides for the transaction  # noqa: E501

        :param merchant_category_code: The merchant_category_code of this Risk1.  # noqa: E501
        :type: str
        """
        if merchant_category_code is not None and len(merchant_category_code) > 4:
            raise ValueError("Invalid value for `merchant_category_code`, length must be less than or equal to `4`")  # noqa: E501
        if merchant_category_code is not None and len(merchant_category_code) < 3:
            raise ValueError("Invalid value for `merchant_category_code`, length must be greater than or equal to `3`")  # noqa: E501

        self._merchant_category_code = merchant_category_code

    @property
    def merchant_customer_identification(self):
        """Gets the merchant_customer_identification of this Risk1.  # noqa: E501

        The unique customer identifier of the PSU with the merchant.  # noqa: E501

        :return: The merchant_customer_identification of this Risk1.  # noqa: E501
        :rtype: str
        """
        return self._merchant_customer_identification

    @merchant_customer_identification.setter
    def merchant_customer_identification(self, merchant_customer_identification):
        """Sets the merchant_customer_identification of this Risk1.

        The unique customer identifier of the PSU with the merchant.  # noqa: E501

        :param merchant_customer_identification: The merchant_customer_identification of this Risk1.  # noqa: E501
        :type: str
        """
        if merchant_customer_identification is not None and len(merchant_customer_identification) > 70:
            raise ValueError("Invalid value for `merchant_customer_identification`, length must be less than or equal to `70`")  # noqa: E501
        if merchant_customer_identification is not None and len(merchant_customer_identification) < 1:
            raise ValueError("Invalid value for `merchant_customer_identification`, length must be greater than or equal to `1`")  # noqa: E501

        self._merchant_customer_identification = merchant_customer_identification

    @property
    def delivery_address(self):
        """Gets the delivery_address of this Risk1.  # noqa: E501


        :return: The delivery_address of this Risk1.  # noqa: E501
        :rtype: RiskDeliveryAddress
        """
        return self._delivery_address

    @delivery_address.setter
    def delivery_address(self, delivery_address):
        """Sets the delivery_address of this Risk1.


        :param delivery_address: The delivery_address of this Risk1.  # noqa: E501
        :type: RiskDeliveryAddress
        """

        self._delivery_address = delivery_address

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Risk1):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
