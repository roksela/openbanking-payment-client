# coding: utf-8

"""
    Python client for Payment Initiation API

    Based on https://github.com/OpenBankingUK/payment-initiation-api-spec

    OpenAPI spec version: v1.1.1
    Spec: https://www.openbanking.org.uk/read-write-apis/
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class PaymentSetupInitiationInstructedAmount(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'amount': 'str',
        'currency': 'str'
    }

    attribute_map = {
        'amount': 'Amount',
        'currency': 'Currency'
    }

    def __init__(self, amount=None, currency=None):  # noqa: E501
        """PaymentSetupInitiationInstructedAmount - a model defined in Swagger"""  # noqa: E501

        self._amount = None
        self._currency = None
        self.discriminator = None

        self.amount = amount
        self.currency = currency

    @property
    def amount(self):
        """Gets the amount of this PaymentSetupInitiationInstructedAmount.  # noqa: E501


        :return: The amount of this PaymentSetupInitiationInstructedAmount.  # noqa: E501
        :rtype: str
        """
        return self._amount

    @amount.setter
    def amount(self, amount):
        """Sets the amount of this PaymentSetupInitiationInstructedAmount.


        :param amount: The amount of this PaymentSetupInitiationInstructedAmount.  # noqa: E501
        :type: str
        """
        if amount is None:
            raise ValueError("Invalid value for `amount`, must not be `None`")  # noqa: E501
        if amount is not None and not re.search('^\\d{1,13}\\.\\d{1,5}$', amount):  # noqa: E501
            raise ValueError("Invalid value for `amount`, must be a follow pattern or equal to `/^\\d{1,13}\\.\\d{1,5}$/`")  # noqa: E501

        self._amount = amount

    @property
    def currency(self):
        """Gets the currency of this PaymentSetupInitiationInstructedAmount.  # noqa: E501

        A code allocated to a currency by a Maintenance Agency under an international identification scheme, as described in the latest edition of the international standard ISO 4217 - Codes for the representation of currencies and funds.  # noqa: E501

        :return: The currency of this PaymentSetupInitiationInstructedAmount.  # noqa: E501
        :rtype: str
        """
        return self._currency

    @currency.setter
    def currency(self, currency):
        """Sets the currency of this PaymentSetupInitiationInstructedAmount.

        A code allocated to a currency by a Maintenance Agency under an international identification scheme, as described in the latest edition of the international standard ISO 4217 - Codes for the representation of currencies and funds.  # noqa: E501

        :param currency: The currency of this PaymentSetupInitiationInstructedAmount.  # noqa: E501
        :type: str
        """
        if currency is None:
            raise ValueError("Invalid value for `currency`, must not be `None`")  # noqa: E501
        if currency is not None and not re.search('^[A-Z]{3,3}$', currency):  # noqa: E501
            raise ValueError("Invalid value for `currency`, must be a follow pattern or equal to `/^[A-Z]{3,3}$/`")  # noqa: E501

        self._currency = currency

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, PaymentSetupInitiationInstructedAmount):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
