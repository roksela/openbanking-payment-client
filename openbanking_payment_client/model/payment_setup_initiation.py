# coding: utf-8

"""
    Python client for Payment Initiation API

    Based on https://github.com/OpenBankingUK/payment-initiation-api-spec

    OpenAPI spec version: v1.1.1
    Spec: https://www.openbanking.org.uk/read-write-apis/
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from openbanking_payment_client.model.creditor_account import CreditorAccount  # noqa: F401,E501
from openbanking_payment_client.model.creditor_agent import CreditorAgent  # noqa: F401,E501
from openbanking_payment_client.model.debtor_account import DebtorAccount  # noqa: F401,E501
from openbanking_payment_client.model.debtor_agent import DebtorAgent  # noqa: F401,E501
from openbanking_payment_client.model.payment_setup_initiation_instructed_amount import PaymentSetupInitiationInstructedAmount  # noqa: F401,E501
from openbanking_payment_client.model.remittance_information import RemittanceInformation  # noqa: F401,E501


class PaymentSetupInitiation(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'instruction_identification': 'str',
        'end_to_end_identification': 'str',
        'instructed_amount': 'PaymentSetupInitiationInstructedAmount',
        'debtor_agent': 'DebtorAgent',
        'debtor_account': 'DebtorAccount',
        'creditor_agent': 'CreditorAgent',
        'creditor_account': 'CreditorAccount',
        'remittance_information': 'RemittanceInformation'
    }

    attribute_map = {
        'instruction_identification': 'InstructionIdentification',
        'end_to_end_identification': 'EndToEndIdentification',
        'instructed_amount': 'InstructedAmount',
        'debtor_agent': 'DebtorAgent',
        'debtor_account': 'DebtorAccount',
        'creditor_agent': 'CreditorAgent',
        'creditor_account': 'CreditorAccount',
        'remittance_information': 'RemittanceInformation'
    }

    def __init__(self, instruction_identification=None, end_to_end_identification=None, instructed_amount=None, debtor_agent=None, debtor_account=None, creditor_agent=None, creditor_account=None, remittance_information=None):  # noqa: E501
        """PaymentSetupInitiation - a model defined in Swagger"""  # noqa: E501

        self._instruction_identification = None
        self._end_to_end_identification = None
        self._instructed_amount = None
        self._debtor_agent = None
        self._debtor_account = None
        self._creditor_agent = None
        self._creditor_account = None
        self._remittance_information = None
        self.discriminator = None

        self.instruction_identification = instruction_identification
        self.end_to_end_identification = end_to_end_identification
        self.instructed_amount = instructed_amount
        if debtor_agent is not None:
            self.debtor_agent = debtor_agent
        if debtor_account is not None:
            self.debtor_account = debtor_account
        if creditor_agent is not None:
            self.creditor_agent = creditor_agent
        self.creditor_account = creditor_account
        if remittance_information is not None:
            self.remittance_information = remittance_information

    @property
    def instruction_identification(self):
        """Gets the instruction_identification of this PaymentSetupInitiation.  # noqa: E501

        Unique identification as assigned by an instructing party for an instructed party to unambiguously identify the instruction. Usage: the  instruction identification is a point to point reference that can be used between the instructing party and the instructed party to refer to the individual instruction. It can be included in several messages related to the instruction.  # noqa: E501

        :return: The instruction_identification of this PaymentSetupInitiation.  # noqa: E501
        :rtype: str
        """
        return self._instruction_identification

    @instruction_identification.setter
    def instruction_identification(self, instruction_identification):
        """Sets the instruction_identification of this PaymentSetupInitiation.

        Unique identification as assigned by an instructing party for an instructed party to unambiguously identify the instruction. Usage: the  instruction identification is a point to point reference that can be used between the instructing party and the instructed party to refer to the individual instruction. It can be included in several messages related to the instruction.  # noqa: E501

        :param instruction_identification: The instruction_identification of this PaymentSetupInitiation.  # noqa: E501
        :type: str
        """
        if instruction_identification is None:
            raise ValueError("Invalid value for `instruction_identification`, must not be `None`")  # noqa: E501
        if instruction_identification is not None and len(instruction_identification) > 35:
            raise ValueError("Invalid value for `instruction_identification`, length must be less than or equal to `35`")  # noqa: E501
        if instruction_identification is not None and len(instruction_identification) < 1:
            raise ValueError("Invalid value for `instruction_identification`, length must be greater than or equal to `1`")  # noqa: E501

        self._instruction_identification = instruction_identification

    @property
    def end_to_end_identification(self):
        """Gets the end_to_end_identification of this PaymentSetupInitiation.  # noqa: E501

        Unique identification assigned by the initiating party to unambiguously identify the transaction. This identification is passed on, unchanged, throughout the entire end-to-end chain. Usage: The end-to-end identification can be used for reconciliation or to link tasks relating to the transaction. It can be included in several messages related to the transaction. OB: The Faster Payments Scheme can only access 31 characters for the EndToEndIdentification field.  # noqa: E501

        :return: The end_to_end_identification of this PaymentSetupInitiation.  # noqa: E501
        :rtype: str
        """
        return self._end_to_end_identification

    @end_to_end_identification.setter
    def end_to_end_identification(self, end_to_end_identification):
        """Sets the end_to_end_identification of this PaymentSetupInitiation.

        Unique identification assigned by the initiating party to unambiguously identify the transaction. This identification is passed on, unchanged, throughout the entire end-to-end chain. Usage: The end-to-end identification can be used for reconciliation or to link tasks relating to the transaction. It can be included in several messages related to the transaction. OB: The Faster Payments Scheme can only access 31 characters for the EndToEndIdentification field.  # noqa: E501

        :param end_to_end_identification: The end_to_end_identification of this PaymentSetupInitiation.  # noqa: E501
        :type: str
        """
        if end_to_end_identification is None:
            raise ValueError("Invalid value for `end_to_end_identification`, must not be `None`")  # noqa: E501
        if end_to_end_identification is not None and len(end_to_end_identification) > 35:
            raise ValueError("Invalid value for `end_to_end_identification`, length must be less than or equal to `35`")  # noqa: E501
        if end_to_end_identification is not None and len(end_to_end_identification) < 1:
            raise ValueError("Invalid value for `end_to_end_identification`, length must be greater than or equal to `1`")  # noqa: E501

        self._end_to_end_identification = end_to_end_identification

    @property
    def instructed_amount(self):
        """Gets the instructed_amount of this PaymentSetupInitiation.  # noqa: E501


        :return: The instructed_amount of this PaymentSetupInitiation.  # noqa: E501
        :rtype: PaymentSetupInitiationInstructedAmount
        """
        return self._instructed_amount

    @instructed_amount.setter
    def instructed_amount(self, instructed_amount):
        """Sets the instructed_amount of this PaymentSetupInitiation.


        :param instructed_amount: The instructed_amount of this PaymentSetupInitiation.  # noqa: E501
        :type: PaymentSetupInitiationInstructedAmount
        """
        if instructed_amount is None:
            raise ValueError("Invalid value for `instructed_amount`, must not be `None`")  # noqa: E501

        self._instructed_amount = instructed_amount

    @property
    def debtor_agent(self):
        """Gets the debtor_agent of this PaymentSetupInitiation.  # noqa: E501


        :return: The debtor_agent of this PaymentSetupInitiation.  # noqa: E501
        :rtype: DebtorAgent
        """
        return self._debtor_agent

    @debtor_agent.setter
    def debtor_agent(self, debtor_agent):
        """Sets the debtor_agent of this PaymentSetupInitiation.


        :param debtor_agent: The debtor_agent of this PaymentSetupInitiation.  # noqa: E501
        :type: DebtorAgent
        """

        self._debtor_agent = debtor_agent

    @property
    def debtor_account(self):
        """Gets the debtor_account of this PaymentSetupInitiation.  # noqa: E501


        :return: The debtor_account of this PaymentSetupInitiation.  # noqa: E501
        :rtype: DebtorAccount
        """
        return self._debtor_account

    @debtor_account.setter
    def debtor_account(self, debtor_account):
        """Sets the debtor_account of this PaymentSetupInitiation.


        :param debtor_account: The debtor_account of this PaymentSetupInitiation.  # noqa: E501
        :type: DebtorAccount
        """

        self._debtor_account = debtor_account

    @property
    def creditor_agent(self):
        """Gets the creditor_agent of this PaymentSetupInitiation.  # noqa: E501


        :return: The creditor_agent of this PaymentSetupInitiation.  # noqa: E501
        :rtype: CreditorAgent
        """
        return self._creditor_agent

    @creditor_agent.setter
    def creditor_agent(self, creditor_agent):
        """Sets the creditor_agent of this PaymentSetupInitiation.


        :param creditor_agent: The creditor_agent of this PaymentSetupInitiation.  # noqa: E501
        :type: CreditorAgent
        """

        self._creditor_agent = creditor_agent

    @property
    def creditor_account(self):
        """Gets the creditor_account of this PaymentSetupInitiation.  # noqa: E501


        :return: The creditor_account of this PaymentSetupInitiation.  # noqa: E501
        :rtype: CreditorAccount
        """
        return self._creditor_account

    @creditor_account.setter
    def creditor_account(self, creditor_account):
        """Sets the creditor_account of this PaymentSetupInitiation.


        :param creditor_account: The creditor_account of this PaymentSetupInitiation.  # noqa: E501
        :type: CreditorAccount
        """
        if creditor_account is None:
            raise ValueError("Invalid value for `creditor_account`, must not be `None`")  # noqa: E501

        self._creditor_account = creditor_account

    @property
    def remittance_information(self):
        """Gets the remittance_information of this PaymentSetupInitiation.  # noqa: E501


        :return: The remittance_information of this PaymentSetupInitiation.  # noqa: E501
        :rtype: RemittanceInformation
        """
        return self._remittance_information

    @remittance_information.setter
    def remittance_information(self, remittance_information):
        """Sets the remittance_information of this PaymentSetupInitiation.


        :param remittance_information: The remittance_information of this PaymentSetupInitiation.  # noqa: E501
        :type: RemittanceInformation
        """

        self._remittance_information = remittance_information

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, PaymentSetupInitiation):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
