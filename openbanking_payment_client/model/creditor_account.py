# coding: utf-8

"""
    Python client for Payment Initiation API

    Based on https://github.com/OpenBankingUK/payment-initiation-api-spec

    OpenAPI spec version: v1.1.1
    Spec: https://www.openbanking.org.uk/read-write-apis/
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class CreditorAccount(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'scheme_name': 'str',
        'identification': 'str',
        'name': 'str',
        'secondary_identification': 'str'
    }

    attribute_map = {
        'scheme_name': 'SchemeName',
        'identification': 'Identification',
        'name': 'Name',
        'secondary_identification': 'SecondaryIdentification'
    }

    def __init__(self, scheme_name=None, identification=None, name=None, secondary_identification=None):  # noqa: E501
        """CreditorAccount - a model defined in Swagger"""  # noqa: E501

        self._scheme_name = None
        self._identification = None
        self._name = None
        self._secondary_identification = None
        self.discriminator = None

        self.scheme_name = scheme_name
        self.identification = identification
        self.name = name
        if secondary_identification is not None:
            self.secondary_identification = secondary_identification

    @property
    def scheme_name(self):
        """Gets the scheme_name of this CreditorAccount.  # noqa: E501

        Name of the identification scheme, in a coded form as published in an external list.  # noqa: E501

        :return: The scheme_name of this CreditorAccount.  # noqa: E501
        :rtype: str
        """
        return self._scheme_name

    @scheme_name.setter
    def scheme_name(self, scheme_name):
        """Sets the scheme_name of this CreditorAccount.

        Name of the identification scheme, in a coded form as published in an external list.  # noqa: E501

        :param scheme_name: The scheme_name of this CreditorAccount.  # noqa: E501
        :type: str
        """
        if scheme_name is None:
            raise ValueError("Invalid value for `scheme_name`, must not be `None`")  # noqa: E501
        allowed_values = ["IBAN", "SortCodeAccountNumber"]  # noqa: E501
        if scheme_name not in allowed_values:
            raise ValueError(
                "Invalid value for `scheme_name` ({0}), must be one of {1}"  # noqa: E501
                .format(scheme_name, allowed_values)
            )

        self._scheme_name = scheme_name

    @property
    def identification(self):
        """Gets the identification of this CreditorAccount.  # noqa: E501

        Identification assigned by an institution to identify an account. This identification is known by the account owner.  # noqa: E501

        :return: The identification of this CreditorAccount.  # noqa: E501
        :rtype: str
        """
        return self._identification

    @identification.setter
    def identification(self, identification):
        """Sets the identification of this CreditorAccount.

        Identification assigned by an institution to identify an account. This identification is known by the account owner.  # noqa: E501

        :param identification: The identification of this CreditorAccount.  # noqa: E501
        :type: str
        """
        if identification is None:
            raise ValueError("Invalid value for `identification`, must not be `None`")  # noqa: E501
        if identification is not None and len(identification) > 34:
            raise ValueError("Invalid value for `identification`, length must be less than or equal to `34`")  # noqa: E501
        if identification is not None and len(identification) < 1:
            raise ValueError("Invalid value for `identification`, length must be greater than or equal to `1`")  # noqa: E501

        self._identification = identification

    @property
    def name(self):
        """Gets the name of this CreditorAccount.  # noqa: E501

        Name of the account, as assigned by the account servicing institution, in agreement with the account owner in order to provide an additional means of identification of the account. Usage: The account name is different from the account owner name. The account name is used in certain user communities to provide a means of identifying the account, in addition to the account owner's identity and the account number. ASPSPs may carry out name validation for Confirmation of Payee, but it is not mandatory.  # noqa: E501

        :return: The name of this CreditorAccount.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this CreditorAccount.

        Name of the account, as assigned by the account servicing institution, in agreement with the account owner in order to provide an additional means of identification of the account. Usage: The account name is different from the account owner name. The account name is used in certain user communities to provide a means of identifying the account, in addition to the account owner's identity and the account number. ASPSPs may carry out name validation for Confirmation of Payee, but it is not mandatory.  # noqa: E501

        :param name: The name of this CreditorAccount.  # noqa: E501
        :type: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")  # noqa: E501
        if name is not None and len(name) > 70:
            raise ValueError("Invalid value for `name`, length must be less than or equal to `70`")  # noqa: E501
        if name is not None and len(name) < 1:
            raise ValueError("Invalid value for `name`, length must be greater than or equal to `1`")  # noqa: E501

        self._name = name

    @property
    def secondary_identification(self):
        """Gets the secondary_identification of this CreditorAccount.  # noqa: E501

        This is secondary identification of the account, as assigned by the account servicing institution. This can be used by building societies to additionally identify accounts with a roll number (in addition to a sort code and account number combination).  # noqa: E501

        :return: The secondary_identification of this CreditorAccount.  # noqa: E501
        :rtype: str
        """
        return self._secondary_identification

    @secondary_identification.setter
    def secondary_identification(self, secondary_identification):
        """Sets the secondary_identification of this CreditorAccount.

        This is secondary identification of the account, as assigned by the account servicing institution. This can be used by building societies to additionally identify accounts with a roll number (in addition to a sort code and account number combination).  # noqa: E501

        :param secondary_identification: The secondary_identification of this CreditorAccount.  # noqa: E501
        :type: str
        """
        if secondary_identification is not None and len(secondary_identification) > 34:
            raise ValueError("Invalid value for `secondary_identification`, length must be less than or equal to `34`")  # noqa: E501
        if secondary_identification is not None and len(secondary_identification) < 1:
            raise ValueError("Invalid value for `secondary_identification`, length must be greater than or equal to `1`")  # noqa: E501

        self._secondary_identification = secondary_identification

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, CreditorAccount):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
